class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

def search(root,se):
    if root:
        if(root.val==se):
            return root.val
        if(se<root.val):
            return search(root.left,se)
        return search(root.right,se)  

\
# Let us create the following BST
#    50
#  /     \
# 30     70
#  / \ / \
# 20 40 60 80
 


def insert(root,key):
    if root is None:
        return Node(key)
    
    else:
        if(root.val==key):
            return root
        elif(root.val>key):
            root.left=insert(root.left,key)
        else:
            root.right=insert(root.right,key)
            
        

    return root


def inorder(root):
    if(root):
        inorder(root.left)
        print(root.val)
        inorder(root.right)
    
        
root=Node(50)
insert(root,30)
insert(root,20)
insert(root,40)
insert(root,70)
insert(root,60)
insert(root,80)
inorder(root)
print(search(root,20))


    
    